/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _manifest_clusterctl_api_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\xb6\x87\xbd\xd4\x72\xd3\x5c\x0a\xdd\x16\x69\x0b\xa4\x1f\xdb\x60\x93\x66\x0f\x45\x0f\xb4\x38\xb6\xa7\xa1\x86\x2c\x67\xe8\x6c\x5a\xf4\xbf\x17\x24\x25\x59\x32\x90\xf5\x65\x7d\x32\x9f\x66\x38\x8f\x6f\xbe\x4c\xa0\x47\x8c\x42\x9e\x5b\x30\x81\xf0\x93\x22\xe7\x93\x34\x4f\xdf\x49\x43\x7e\x73\xbc\xda\xa2\x9a\xab\xd5\x13\xb1\x6d\xe1\x26\x89\xfa\xfe\x03\x8a\x4f\xb1\xc3\xef\x71\x47\x4c\x4a\x9e\x57\x3d\xaa\xb1\x46\x4d\xbb\x02\x30\xcc\x5e\x4d\x86\x25\x1f\x01\x3a\xcf\x1a\xbd\x73\x18\xd7\x7b\xe4\xe6\x29\x6d\x71\x9b\xc8\x59\x8c\x25\xc2\x18\xff\xf8\x4d\xf3\x6d\x73\xbd\x02\xe8\x22\x16\xf7\x07\xea\x51\xd4\xf4\xa1\x05\x4e\xce\xad\x00\xd8\xf4\xd8\x42\x88\xfe\x48\x16\xa3\x34\x9d\x4b\xa2\x18\x3b\x75\xe3\xdf\xe6\xd3\xba\x32\x5f\x49\xc0\xae\xd0\xb1\xb6\x70\x34\xee\x2e\x12\x2b\xc6\x1b\xef\x52\x5f\xb9\xad\xe1\xa7\xfb\xdf\xde\xdf\x19\x3d\xb4\xd0\xe8\x4b\xc0\xc2\xb7\x46\x79\x18\x8f\x19\x6f\x41\x34\x12\xef\xcf\x7d\x06\xf2\x33\xb7\xc7\x19\xf2\x39\xcf\x67\xa3\xdd\x01\xed\x7b\xd3\xa3\x04\xd3\xcd\x23\x7f\xcc\x9f\x60\xf9\xe5\xec\xaa\x7d\xf4\x29\xb4\xf0\xb9\xf7\xd7\xdb\xc6\x14\x18\xc5\xbd\x8f\x34\x9e\xd7\xa3\xeb\xda\x04\x2a\x48\x4d\xf0\xdd\x20\x6d\x81\x1c\x89\xfe\xbc\x80\x7f\x21\xd1\xf2\x29\xb8\x14\x8d\x9b\xa5\xa2\xa0\x42\xbc\x4f\xce\xc4\x13\xbe\x02\x08\x11\x05\xe3\x11\x7f\xe7\x27\xf6\xcf\xfc\x23\xa1\xb3\xd2\xc2\xce\x38\xc9\x4f\x93\xce\xe7\x97\x4d\xaf\xb5\x19\x4b\xdb\x38\xd4\x98\xb4\xf0\xef\x7f\x2b\x80\xa3\x71\x64\x4b\x55\xd4\x07\xf8\x80\xfc\xee\xee\xf6\xf1\xfa\xbe\x3b\x60\x6f\x2a\x08\x60\x51\xba\x48\xa1\xd8\x4d\xac\x81\x04\xf4\x80\x50\x4d\x61\xe7\x63\x39\x4e\xdc\xe1\xdd\xdd\xed\xe0\x1f\xa2\x0f\x18\x75\xd2\x29\xff\x66\x3d\x32\x61\x67\x91\xde\x66\x2a\xd5\x06\x6c\xee\x0a\xac\x11\x87\xf2\x40\x0b\x52\x63\xfb\x1d\xe8\x81\x04\x22\x16\x59\xb8\xf6\xc9\xec\x5a\xc8\x26\x86\xc1\x6f\xff\xc2\x4e\x1b\xb8\xcf\xd2\x45\x01\x39\xf8\xe4\x6c\x6e\xa5\x23\x46\x85\x88\x9d\xdf\x33\xfd\x33\xdd\x2c\xa0\xbe\x84\x74\x46\x71\x48\xd2\xf8\x2b\x55\xcf\xc6\x65\x11\x13\x7e\x0d\x86\x2d\xf4\xe6\x05\x22\xe6\x18\x90\x78\x76\x5b\x31\x91\x06\x7e\xf5\x11\x81\x78\xe7\x5b\x38\xa8\x06\x69\x37\x9b\x3d\xe9\x38\x15\x3a\xdf\xf7\x89\x49\x5f\x36\xa5\xb7\x69\x9b\xd4\x47\xd9\x58\x3c\xa2\xdb\x98\x40\xeb\xc2\x93\xcb\x0c\x68\x7a\xfb\xd5\x94\xcd\xb7\x33\x62\x67\x25\x5d\x7f\xa5\x0c\x5f\x95\x39\x57\x63\xce\xa6\x19\xdc\x2a\xdd\x93\x9a\x19\xca\x22\x7c\xf8\xe1\xfe\x01\xc6\xa0\x45\xf1\xa5\xc4\x45\xdc\x93\x9b\x9c\x74\xce\xba\x10\xef\x30\xd6\x3c\xed\xa2\xef\xcb\x8d\xc8\x36\x78\x62\x2d\x87\xce\x11\xf2\x52\x63\x49\xdb\x9e\x34\x27\xf6\xef\x84\xa2\x39\x1d\x0d\xdc\x94\x51\x08\x5b\x84\x14\xac\x51\xb4\x0d\xdc\x32\xdc\x98\x1e\xdd\x8d\x11\xfc\xd2\x2a\x67\x41\x65\x9d\x15\xbc\xac\xf3\x7c\x60\x2f\x0d\xab\x38\xab\x05\xf8\x5a\x42\xf2\x8c\x04\x62\x4b\x79\xbe\xd4\x92\xcf\xf6\xb5\xcc\x4f\x1d\x96\xe5\xc5\xa9\x1d\x8b\xd3\xce\xc7\x85\x7e\xa6\x4c\x9b\xec\x28\x29\x04\x1f\x75\xaa\xc5\x4b\x2f\x39\x5e\xe8\xcd\xb1\x2f\x97\x34\x3b\xdf\x07\xcf\xc8\x3a\xfa\x37\x97\xe2\x9c\x0f\xec\x57\x03\x7e\x3c\x33\x3c\x8b\xcc\x13\xfe\x7c\xc0\x88\x0b\xa1\x16\x92\x9c\xd6\x66\x2e\x79\x92\xca\x80\x78\xdf\x00\xed\x00\xfb\xa0\x2f\x0b\xe7\x33\x87\xd1\x7a\x71\x67\x9e\x7d\x35\xc1\x02\xc4\x60\x9c\x3b\xf1\x91\x0b\x12\x9c\x95\xc7\x69\x6f\x5f\x19\x17\x0e\xe6\xfa\x84\x0d\xbb\xb5\x6e\xb3\xd9\x67\x80\xb2\x09\x6c\x0b\x1a\x53\xdd\x6b\xa2\x3e\x9a\x3d\x0e\x88\xa8\xd1\x54\xbc\x4d\xd7\x61\xd0\x41\xc5\x76\xb6\xa1\xde\xbc\x59\x2c\xa0\x72\xec\x3c\xd7\x1d\x2f\x2d\xfc\xf1\xe7\xaa\xde\x8a\xf6\x71\x64\x93\xc1\xff\x03\x00\x00\xff\xff\x11\xe6\x59\xd7\xea\x08\x00\x00")

func manifest_clusterctl_api_yaml() ([]byte, error) {
	return bindata_read(
		_manifest_clusterctl_api_yaml,
		"manifest/clusterctl-api.yaml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"manifest/clusterctl-api.yaml": manifest_clusterctl_api_yaml,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"manifest": &_bintree_t{nil, map[string]*_bintree_t{
		"clusterctl-api.yaml": &_bintree_t{manifest_clusterctl_api_yaml, map[string]*_bintree_t{
		}},
	}},
}}
